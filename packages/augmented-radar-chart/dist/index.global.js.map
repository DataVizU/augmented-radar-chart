{"version":3,"sources":["../src/calculation/calculateAverage.ts","../src/calculation/calculateDistribution.ts","../src/chart.ts","../src/index.ts"],"names":["calculateAverage","data","averages","dimension","points","average","acc","pointData","calculateDistribution","config","AugmentedRadarChart","AugmentedRadarChartSVG","AugmentedRadarChartCanvas","draw","options","renderer","chart","helloWorld"],"mappings":"wDAEO,SAASA,CAAiBC,CAAAA,CAAAA,CAAuD,CAMtF,IAAMC,EAAmC,EAAC,CAC1C,IAAWC,IAAAA,CAAAA,IAAaF,CAAM,CAAA,CAC5B,IAAMG,CAAAA,CAASH,EAAKE,CAAS,CAAA,CAEvBE,CADMD,CAAAA,CAAAA,CAAO,MAAO,CAAA,CAACE,CAAKC,CAAAA,CAAAA,GAAcD,EAAMC,CAAU,CAAA,KAAA,CAAO,CAAC,CAAA,CAChDH,CAAO,CAAA,MAAA,CAC7BF,CAASC,CAAAA,CAAS,EAAIE,EAAQ,CAEhC,OAAOH,CACT,CCdO,SAASM,CACdP,CAAAA,CAAAA,CACAQ,EACyB,CAQzB,OAAA,OAAA,CAAQ,GAAI,CAAA,CAAE,IAAAR,CAAAA,CAAAA,CAAM,MAAAQ,CAAAA,CAAO,CAAC,CACrB,CAAA,EACT,CCXA,IAAeC,CAAAA,CAAf,KAAmC,CAMjC,YAAYT,CAA+BQ,CAAAA,CAAAA,CAAmC,CAC5E,GAAmBA,CAAwBR,EAAAA,CAAAA,CACzC,IAAK,CAAA,IAAA,CAAOA,EACZ,IAAK,CAAA,MAAA,CAASQ,CACd,CAAA,IAAA,CAAK,OAAUT,CAAAA,CAAAA,CAAiBC,CAAI,CAAA,CACpC,KAAK,YAAeO,CAAAA,CAAAA,CAAsBP,CAAMQ,CAAAA,CAAAA,CAAO,IAAI,CAAA,CAAA,KAErD,MAAA,IAAI,MAAM,wBAAwB,CAE5C,CACO,IAAA,EAAa,EACtB,CAEaE,CAAAA,CAAAA,CAAN,cAAqCD,CAAoB,CACvD,IAAa,EAAA,EACtB,CAAA,CAEaE,CAAN,CAAA,cAAwCF,CAAoB,CAC1D,IAAA,EAAa,EACtB,CC1BO,CAAA,SAASG,CACdZ,CAAAA,CAAAA,CACAa,EACAC,CACM,CAAA,CACN,IAAIC,CAAAA,CACAD,CAAa,GAAA,KAAA,CACfC,CAAQ,CAAA,IAAIL,EAAuBV,CAAMa,CAAAA,CAAO,CAEhDE,CAAAA,CAAAA,CAAQ,IAAIJ,CAAAA,CAA0BX,CAAMa,CAAAA,CAAO,EAErDE,CAAM,CAAA,IAAA,GACR,CAEO,SAASC,CAAmB,EAAA,CACjC,OAAQ,CAAA,GAAA,CAAI,YAAY,EAC1B","file":"index.global.js","sourcesContent":["import { AugmentedRadarChartData } from '../type';\r\n\r\nexport function calculateAverage(data: AugmentedRadarChartData): Record<string, number> {\r\n  /**\r\n   * calculate averages of each dimension\r\n   * @param {AugmentedRadarChartData} data - data\r\n   * @return {Record<string, number>} - averages of each dimension\r\n   */\r\n  const averages: Record<string, number> = {};\r\n  for (const dimension in data) {\r\n    const points = data[dimension];\r\n    const sum = points.reduce((acc, pointData) => acc + pointData.value, 0);\r\n    const average = sum / points.length;\r\n    averages[dimension] = average;}\r\n  //console.log({ data });\r\n  return averages;\r\n}\r\n","import { AugmentedRadarChartData } from '../type';\r\n\r\nexport function calculateDistribution(\r\n  data: AugmentedRadarChartData,\r\n  config: Record<string, { start: number; end: number }>,\r\n): AugmentedRadarChartData {\r\n  /**\r\n   * @deprecated\r\n   * calculate distribution of each dimension\r\n   * @param {AugmentedRadarChartData} data - data\r\n   * @param {Record<string, { start: number; end: number }>} config\r\n   * @return {AugmentedRadarChartData} - distribution of each dimension\r\n   */\r\n  console.log({ data, config });\r\n  return {};\r\n}\r\n","import { AugmentedRadarChartConfig, AugmentedRadarChartData } from './type';\r\nimport { validateConfig, validateData } from './validation';\r\nimport { calculateAverage, calculateDistribution } from './calculation';\r\n\r\nabstract class AugmentedRadarChart {\r\n  private data: AugmentedRadarChartData | undefined;\r\n  private config: AugmentedRadarChartConfig | undefined;\r\n  private average: Record<string, number> | undefined;\r\n  private distribution: AugmentedRadarChartData | undefined;\r\n\r\n  constructor(data: AugmentedRadarChartData, config: AugmentedRadarChartConfig) {\r\n    if (validateConfig(config) && validateData(data)) {\r\n      this.data = data;\r\n      this.config = config;\r\n      this.average = calculateAverage(data);\r\n      this.distribution = calculateDistribution(data, config.bins);\r\n    } else {\r\n      throw new Error(`Invalid data or config`);\r\n    }\r\n  }\r\n  public draw(): void {}\r\n}\r\n\r\nexport class AugmentedRadarChartSVG extends AugmentedRadarChart {\r\n  public draw(): void {}\r\n}\r\n\r\nexport class AugmentedRadarChartCanvas extends AugmentedRadarChart {\r\n  public draw(): void {}\r\n}\r\n","import { AugmentedRadarChartConfig, AugmentedRadarChartData } from './type';\r\nimport { AugmentedRadarChartCanvas, AugmentedRadarChartSVG } from './chart';\r\n\r\nexport function draw(\r\n  data: AugmentedRadarChartData,\r\n  options: AugmentedRadarChartConfig,\r\n  renderer: 'SVG' | 'Canvas',\r\n): void {\r\n  let chart;\r\n  if (renderer === 'SVG') {\r\n    chart = new AugmentedRadarChartSVG(data, options);\r\n  } else {\r\n    chart = new AugmentedRadarChartCanvas(data, options);\r\n  }\r\n  chart.draw();\r\n}\r\n\r\nexport function helloWorld(): void {\r\n  console.log('Hello zxy!');\r\n}\r\n"]}